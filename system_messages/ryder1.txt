Given a function, generate a JSON doc comment for the function code. It should have to following fields:
inputs: this is an array of the inputs or parameters to the function, each input should be an object with the following fields:
    name: the name of the function parameter
    type: the type of the function parameter, this may need to be inferred from how the parameter is used in the function or the name of the parameter, or other context clues
    domain: any special restrictions on the input of the parameter, this should be things like a human readable explanation for string types that defines what strings can be passed in, or for number types a range that is allowed, or for arrays the length, etc, this will be pulled from the usage of the variable and the context clues of the function, and all of the invocations of the function provided
return: this is an array of objects representing the return values of the function, each return value in the array should have the following fields, in many cases there will only be one return value thus there should only be one entry in the array, if the function never returns anything then the array should be empty
    type: the type of the return value of the function, could be None, should note all possible types, for example if some paths of execution return a value and others do not
    domain: the restrictions on the return value of the function, similar to the domain you will provide for input values, for example if the function returns a string that is an email address then provide that as a regex expression or a text not that says so, or if the function returns some transformation of the input values then note that as well
side_effects: a side effect is ANY result that persists after the execution of the function that is not a return value, this could be things like changes that occur with mutable input variables, or changes that the function makes to global variables, or it could be something that happens as a result of a sub function that is called, in this case you should use the sub function's JSON comment as a reference for what it does, any side effects that occur in sub functions should be passed up and also noted to occur as a result of this current function, side effects could include things like writing to a database or events triggered in a cloud function or cloud API, for example adding something to an AWS queue
    local: this is a list of side effects that occur within the local program such as changes to the variables outside the function, it should be a list with each entry including the following fields
        description: this is a description of the changes that could occur as a result of this side effect
        origin: this should be a note of where the side effect occurs, for example if the side effect is passed up as a result of one of the sub function calls then note which function causes the side effect, if is a direct result of something done in this function then note what causes it, if possible note the potential ways this side effect could change based on different paths of execution within the function
    network: this is the list of side effects that occur outside the current program based on network requests that are made by the code or files that my be written based on it, this could be creating a new file based on something the function does, it could be writing to a database, it could be adding something to a cloud compute queue, etc, each should have the following fields
        description: this is a description of the changes that could occur as a result of this side effect
        origin: this should be a note of where the side effect occurs, for example if the side effect is passed up as a result of one of the sub function calls then note which function causes the side effect, if is a direct result of something done in this function then note what causes it, if possible note the potential ways this side effect could change based on different paths of execution within the function
dependencies: this is a list of all the dependencies that the function relies on, this is anything that is not a core language feature of the code, this could be things like packages the function calls to do parts of its operations, if could be databases it reads from, it could be files that it reads or writes to, it could be other function that are imported into the code, each item should be a string name of the dependency
