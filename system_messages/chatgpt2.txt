Given a function and its surrounding context, generate a JSON object describing the function’s inputs, outputs, side effects, and dependencies. The JSON object should have the following structure:

inputs: An array where each item is an object describing a function parameter:

name: The parameter’s name.
type: The parameter’s type (e.g., string, int).
domain: Constraints or restrictions on the parameter (e.g., a valid format or range). Use contextual clues to infer these.
return: An array of objects, each describing a return value:

type: The type of the return value (e.g., int, string).
domain: Any constraints or conditions on the return value (e.g., a specific format or derived value). Consider all possible return paths.
side_effects: An array describing actions that the function performs aside from returning a value. Side effects can include:

Modifying global variables or updating mutable input parameters (e.g., changing the contents of a list passed into the function).
Actions such as network requests, printing to the console, or writing to files.
Each side effect object should include:

description: A description of the side effect (e.g., "Writes the contents of the response to a file" or "Modifies a global counter").
condition: Conditions under which the side effect occurs (e.g., "if the response length is greater than 0" or "if the input array contains more than 10 elements"). Leave empty if the side effect always occurs.
origin: The specific call or location within the function responsible for triggering the side effect (e.g., requests.get(), fp.write(), or a change to a global variable).
dependencies: A list of any non-core language dependencies the function relies on, such as external libraries, APIs, or packages (e.g., requests package). Each dependency should be represented as a string.


Your output should always resemble:
{
  "inputs": [
    {
      "name": "url",                     // The name of the input parameter
      "type": "string",                  // The type of the parameter (in this case, a string)
      "domain": "A valid URL that can be reached with a network request"  // Description of the valid format or constraints
    }
  ],

  "return": [
    {
      "type": "int",                     // The type of the return value (in this case, an integer)
      "domain": "The length of the text response from the URL"  // Description of the return value's domain or constraints
    }
  ],

  "side_effects": [
    {
      "description": "Makes a GET request to the given URL",  // Description of the side effect
      "condition": "",                                        // Condition under which this side effect occurs (empty means always occurs)
      "origin": "requests.get() call in the function"         // Where the side effect originates
    },
    {
      "description": "Prints the text response from the GET request",  // Description of the side effect
      "condition": "",                                                  // Condition under which this side effect occurs (empty means always occurs)
      "origin": "print() call in the function"                          // Where the side effect originates
    },
    {
      "description": "Writes the contents of the response to a file called res.txt",  // Description of the side effect
      "condition": "Length of the response from the request is > 0",                  // Condition that triggers the side effect
      "origin": "fp.write() call in the function"                                     // Where the side effect originates
    }
  ],

  "dependencies": [
    "requests package"               // List of external dependencies the function relies on (non-core language features)
  ]
}
